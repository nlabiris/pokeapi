<#@ include file="$(ProjectDir)LinqToDB.Templates\MultipleFiles.ttinclude" #>
<#
	/*
	For linq2db 2.9.5
	Needs  
		include file="$(LinqToDBT4SqlServerTemplatesDirectory)MultipleFiles.ttinclude"
		or 
		include file="$(ProjectDir)LinqToDB.Templates\MultipleFiles.ttinclude" 
	(I included it as the topmost include of all)

	Puts the generated output into multiple files. Files are wriiten into a subdirectory having the same name like the tt-file,
	For instance
		"c:\temp\proj\DbContext.tt" creates the folder "DbContext" in the project.
	
	If "MultiFileTargetDir" the files will be written in a subfolder of that name.

	The files will be suffixed with the extension ".auto.cs.", unless another extension is provided in "MultiFileExtension"

	At the end of the tt (after "GenerateModel") the following line is required:
		SyncProject();

	No support for classes namespaces, meaning NamespaceA.Class1 and NamespaceB.Class1 will be written to the same "Class1.auto.cs"
	
	*/

	Model = new MultiFileModelSource();	//replace Model (which is originally assigned in T4Model.ttinclude, line 88)
	

#>
<#+
string MultiFileExtension = ".cs";
string MultiFileTargetDir = "Models";


public partial class MultiFileModelSource : ModelSource //base class is in T4Model.ttinclude (line 90)
{
	public override void Render(GeneratedTextTransformation tt)
	{
        string outputFilePath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(tt.Host.TemplateFile), "..", tt.MultiFileTargetDir));

		tt.GenerationEnvironment.Length = 0;	//removes all content already written by the GenerateModel method.
		
		WriteComment(tt, "---------------------------------------------------------------------------------------------------");
		WriteComment(tt, " <auto-generated>");
		WriteComment(tt, "    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).");
		WriteComment(tt, "    With additional support for multiple files.");
		WriteComment(tt, "    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
		WriteComment(tt, " </auto-generated>");
		WriteComment(tt, "---------------------------------------------------------------------------------------------------");

		foreach (var nm in Namespaces)
		{
			foreach (var t in nm.Types)
			{
				//Common code (taken from GenerateModel which starts in T4Model.ttinclude line 17)
				WriteComment(tt, "---------------------------------------------------------------------------------------------------");
				WriteComment(tt, " <auto-generated>");
				WriteComment(tt, "    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).");
				WriteComment(tt, "    With additional support for multiple files.");
				WriteComment(tt, "    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.");
				WriteComment(tt, " </auto-generated>");
				WriteComment(tt, "---------------------------------------------------------------------------------------------------");

				tt.WriteLine("");
				tt.WriteLine("#pragma warning disable 1591");
				tt.WriteLine("");

					//Using some weird indentation for better orientation in this file since VS does not support
					//syntax highligthing and I did not find a good free extension for the rare occasions
					//I'm working with T4

					//Namespace specific (taken from Namespace.Render found at T4Model.ttinclude line 136)
					if (!string.IsNullOrEmpty(nm.Name))
					{
						WriteBeginNamespace(tt, nm.Name);
						tt.PushIndent("\t");
					}

					tt.RenderUsings(Usings);
					tt.WriteLine("");
					tt.RenderUsings(nm.Usings);
					tt.WriteLine("");

						//Render the type itself
						t.Render(tt);
						tt.WriteLine("");

					tt.Trim();

					if (!string.IsNullOrEmpty(nm.Name))
					{
						tt.PopIndent();
						WriteEndNamespace(tt);
					}

				//again common code (taken from GenerateModel which starts in T4Model.ttinclude line 17)
				tt.WriteLine("");
				tt.WriteLine("#pragma warning restore 1591");

				//Render the output to a single file
				tt.SaveOutput(outputFilePath + "\\" + t.Name + tt.MultiFileExtension, 1);
			}//end types in namespace

		}//end namespaces

	}//end  Render

	
}


#>
