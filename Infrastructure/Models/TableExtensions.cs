//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    With additional support for multiple files.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Infrastructure.Models
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using Infrastructure.Core.Business.Data;

	using LinqToDB;
	using LinqToDB.Mapping;

	public static partial class TableExtensions
	{
		public static Ability Find(this ITable<Ability> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AbilityChangelog Find(this ITable<AbilityChangelog> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AbilityChangelogProse Find(this ITable<AbilityChangelogProse> table, int AbilityChangelogId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.AbilityChangelogId == AbilityChangelogId &&
				t.LocalLanguageId    == LocalLanguageId);
		}

		public static AbilityFlavorText Find(this ITable<AbilityFlavorText> table, int AbilityId, int VersionGroupId, int LanguageId)
		{
			return table.FirstOrDefault(t =>
				t.AbilityId      == AbilityId      &&
				t.VersionGroupId == VersionGroupId &&
				t.LanguageId     == LanguageId);
		}

		public static AbilityName Find(this ITable<AbilityName> table, int AbilityId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.AbilityId       == AbilityId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static AbilityProse Find(this ITable<AbilityProse> table, int AbilityId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.AbilityId       == AbilityId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Berry Find(this ITable<Berry> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BerryFirmness Find(this ITable<BerryFirmness> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BerryFirmnessName Find(this ITable<BerryFirmnessName> table, int BerryFirmnessId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.BerryFirmnessId == BerryFirmnessId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static BerryFlavor Find(this ITable<BerryFlavor> table, int BerryId, int ContestTypeId)
		{
			return table.FirstOrDefault(t =>
				t.BerryId       == BerryId &&
				t.ContestTypeId == ContestTypeId);
		}

		public static Characteristic Find(this ITable<Characteristic> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CharacteristicText Find(this ITable<CharacteristicText> table, int CharacteristicId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.CharacteristicId == CharacteristicId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static ConquestEpisode Find(this ITable<ConquestEpisode> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestEpisodeName Find(this ITable<ConquestEpisodeName> table, int EpisodeId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EpisodeId       == EpisodeId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestEpisodeWarrior Find(this ITable<ConquestEpisodeWarrior> table, int EpisodeId, int WarriorId)
		{
			return table.FirstOrDefault(t =>
				t.EpisodeId == EpisodeId &&
				t.WarriorId == WarriorId);
		}

		public static ConquestKingdom Find(this ITable<ConquestKingdom> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestKingdomName Find(this ITable<ConquestKingdomName> table, int KingdomId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.KingdomId       == KingdomId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestMaxLink Find(this ITable<ConquestMaxLink> table, int WarriorRankId, int PokemonSpeciesId)
		{
			return table.FirstOrDefault(t =>
				t.WarriorRankId    == WarriorRankId &&
				t.PokemonSpeciesId == PokemonSpeciesId);
		}

		public static ConquestMoveData Find(this ITable<ConquestMoveData> table, int MoveId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId == MoveId);
		}

		public static ConquestMoveDisplacement Find(this ITable<ConquestMoveDisplacement> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestMoveDisplacementProse Find(this ITable<ConquestMoveDisplacementProse> table, int MoveDisplacementId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveDisplacementId == MoveDisplacementId &&
				t.LocalLanguageId    == LocalLanguageId);
		}

		public static ConquestMoveEffect Find(this ITable<ConquestMoveEffect> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestMoveEffectProse Find(this ITable<ConquestMoveEffectProse> table, int ConquestMoveEffectId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ConquestMoveEffectId == ConquestMoveEffectId &&
				t.LocalLanguageId      == LocalLanguageId);
		}

		public static ConquestMoveRange Find(this ITable<ConquestMoveRange> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestMoveRangeProse Find(this ITable<ConquestMoveRangeProse> table, int ConquestMoveRangeId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ConquestMoveRangeId == ConquestMoveRangeId &&
				t.LocalLanguageId     == LocalLanguageId);
		}

		public static ConquestPokemonAbility Find(this ITable<ConquestPokemonAbility> table, int PokemonSpeciesId, int Slot)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId &&
				t.Slot             == Slot);
		}

		public static ConquestPokemonEvolution Find(this ITable<ConquestPokemonEvolution> table, int EvolvedSpeciesId)
		{
			return table.FirstOrDefault(t =>
				t.EvolvedSpeciesId == EvolvedSpeciesId);
		}

		public static ConquestPokemonMove Find(this ITable<ConquestPokemonMove> table, int PokemonSpeciesId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId);
		}

		public static ConquestPokemonStat Find(this ITable<ConquestPokemonStat> table, int PokemonSpeciesId, int ConquestStatId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId &&
				t.ConquestStatId   == ConquestStatId);
		}

		public static ConquestStat Find(this ITable<ConquestStat> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestStatName Find(this ITable<ConquestStatName> table, int ConquestStatId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ConquestStatId  == ConquestStatId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestTransformationPokemon Find(this ITable<ConquestTransformationPokemon> table, int TransformationId, int PokemonSpeciesId)
		{
			return table.FirstOrDefault(t =>
				t.TransformationId == TransformationId &&
				t.PokemonSpeciesId == PokemonSpeciesId);
		}

		public static ConquestTransformationWarrior Find(this ITable<ConquestTransformationWarrior> table, int TransformationId, int PresentWarriorId)
		{
			return table.FirstOrDefault(t =>
				t.TransformationId == TransformationId &&
				t.PresentWarriorId == PresentWarriorId);
		}

		public static ConquestWarrior Find(this ITable<ConquestWarrior> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestWarriorArchetype Find(this ITable<ConquestWarriorArchetype> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestWarriorName Find(this ITable<ConquestWarriorName> table, int WarriorId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.WarriorId       == WarriorId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestWarriorRank Find(this ITable<ConquestWarriorRank> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestWarriorRankStatMap Find(this ITable<ConquestWarriorRankStatMap> table, int WarriorRankId, int WarriorStatId)
		{
			return table.FirstOrDefault(t =>
				t.WarriorRankId == WarriorRankId &&
				t.WarriorStatId == WarriorStatId);
		}

		public static ConquestWarriorSkill Find(this ITable<ConquestWarriorSkill> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestWarriorSkillName Find(this ITable<ConquestWarriorSkillName> table, int SkillId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.SkillId         == SkillId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestWarriorSpecialty Find(this ITable<ConquestWarriorSpecialty> table, int WarriorId, int TypeId, int Slot)
		{
			return table.FirstOrDefault(t =>
				t.WarriorId == WarriorId &&
				t.TypeId    == TypeId    &&
				t.Slot      == Slot);
		}

		public static ConquestWarriorStat Find(this ITable<ConquestWarriorStat> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ConquestWarriorStatName Find(this ITable<ConquestWarriorStatName> table, int WarriorStatId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.WarriorStatId   == WarriorStatId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ConquestWarriorTransformation Find(this ITable<ConquestWarriorTransformation> table, int TransformedWarriorRankId)
		{
			return table.FirstOrDefault(t =>
				t.TransformedWarriorRankId == TransformedWarriorRankId);
		}

		public static ContestCombo Find(this ITable<ContestCombo> table, int FirstMoveId, int SecondMoveId)
		{
			return table.FirstOrDefault(t =>
				t.FirstMoveId  == FirstMoveId &&
				t.SecondMoveId == SecondMoveId);
		}

		public static ContestEffect Find(this ITable<ContestEffect> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ContestEffectProse Find(this ITable<ContestEffectProse> table, int ContestEffectId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ContestEffectId == ContestEffectId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ContestType Find(this ITable<ContestType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ContestTypeName Find(this ITable<ContestTypeName> table, int ContestTypeId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ContestTypeId   == ContestTypeId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static EggGroup Find(this ITable<EggGroup> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EggGroupProse Find(this ITable<EggGroupProse> table, int EggGroupId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EggGroupId      == EggGroupId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Encounter Find(this ITable<Encounter> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EncounterCondition Find(this ITable<EncounterCondition> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EncounterConditionProse Find(this ITable<EncounterConditionProse> table, int EncounterConditionId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EncounterConditionId == EncounterConditionId &&
				t.LocalLanguageId      == LocalLanguageId);
		}

		public static EncounterConditionValue Find(this ITable<EncounterConditionValue> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EncounterConditionValueMap Find(this ITable<EncounterConditionValueMap> table, int EncounterId, int EncounterConditionValueId)
		{
			return table.FirstOrDefault(t =>
				t.EncounterId               == EncounterId &&
				t.EncounterConditionValueId == EncounterConditionValueId);
		}

		public static EncounterConditionValueProse Find(this ITable<EncounterConditionValueProse> table, int EncounterConditionValueId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EncounterConditionValueId == EncounterConditionValueId &&
				t.LocalLanguageId           == LocalLanguageId);
		}

		public static EncounterMethod Find(this ITable<EncounterMethod> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EncounterMethodProse Find(this ITable<EncounterMethodProse> table, int EncounterMethodId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EncounterMethodId == EncounterMethodId &&
				t.LocalLanguageId   == LocalLanguageId);
		}

		public static EncounterSlot Find(this ITable<EncounterSlot> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EvolutionChain Find(this ITable<EvolutionChain> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EvolutionTrigger Find(this ITable<EvolutionTrigger> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EvolutionTriggerProse Find(this ITable<EvolutionTriggerProse> table, int EvolutionTriggerId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.EvolutionTriggerId == EvolutionTriggerId &&
				t.LocalLanguageId    == LocalLanguageId);
		}

		public static Experience Find(this ITable<Experience> table, int GrowthRateId, int Level)
		{
			return table.FirstOrDefault(t =>
				t.GrowthRateId == GrowthRateId &&
				t.Level        == Level);
		}

		public static Gender Find(this ITable<Gender> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Generation Find(this ITable<Generation> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GenerationName Find(this ITable<GenerationName> table, int GenerationId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.GenerationId    == GenerationId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static GrowthRate Find(this ITable<GrowthRate> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GrowthRateProse Find(this ITable<GrowthRateProse> table, int GrowthRateId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.GrowthRateId    == GrowthRateId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Item Find(this ITable<Item> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ItemCategory Find(this ITable<ItemCategory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ItemCategoryProse Find(this ITable<ItemCategoryProse> table, int ItemCategoryId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemCategoryId  == ItemCategoryId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ItemFlag Find(this ITable<ItemFlag> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ItemFlagMap Find(this ITable<ItemFlagMap> table, int ItemId, int ItemFlagId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId     == ItemId &&
				t.ItemFlagId == ItemFlagId);
		}

		public static ItemFlagProse Find(this ITable<ItemFlagProse> table, int ItemFlagId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemFlagId      == ItemFlagId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ItemFlavorSummary Find(this ITable<ItemFlavorSummary> table, int ItemId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId          == ItemId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ItemFlavorText Find(this ITable<ItemFlavorText> table, int ItemId, int VersionGroupId, int LanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId         == ItemId         &&
				t.VersionGroupId == VersionGroupId &&
				t.LanguageId     == LanguageId);
		}

		public static ItemFlingEffect Find(this ITable<ItemFlingEffect> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ItemFlingEffectProse Find(this ITable<ItemFlingEffectProse> table, int ItemFlingEffectId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemFlingEffectId == ItemFlingEffectId &&
				t.LocalLanguageId   == LocalLanguageId);
		}

		public static ItemGameIndex Find(this ITable<ItemGameIndex> table, int ItemId, int GenerationId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId       == ItemId &&
				t.GenerationId == GenerationId);
		}

		public static ItemName Find(this ITable<ItemName> table, int ItemId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId          == ItemId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ItemPocket Find(this ITable<ItemPocket> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static ItemPocketName Find(this ITable<ItemPocketName> table, int ItemPocketId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemPocketId    == ItemPocketId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static ItemProse Find(this ITable<ItemProse> table, int ItemId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.ItemId          == ItemId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Language Find(this ITable<Language> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LanguageName Find(this ITable<LanguageName> table, int LanguageId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.LanguageId      == LanguageId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Location Find(this ITable<Location> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LocationArea Find(this ITable<LocationArea> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LocationAreaEncounterRate Find(this ITable<LocationAreaEncounterRate> table, int LocationAreaId, int EncounterMethodId, int VersionId)
		{
			return table.FirstOrDefault(t =>
				t.LocationAreaId    == LocationAreaId    &&
				t.EncounterMethodId == EncounterMethodId &&
				t.VersionId         == VersionId);
		}

		public static LocationAreaProse Find(this ITable<LocationAreaProse> table, int LocationAreaId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.LocationAreaId  == LocationAreaId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static LocationGameIndex Find(this ITable<LocationGameIndex> table, int LocationId, int GenerationId, int GameIndex)
		{
			return table.FirstOrDefault(t =>
				t.LocationId   == LocationId   &&
				t.GenerationId == GenerationId &&
				t.GameIndex    == GameIndex);
		}

		public static LocationName Find(this ITable<LocationName> table, int LocationId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.LocationId      == LocationId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Machine Find(this ITable<Machine> table, int MachineNumber, int VersionGroupId)
		{
			return table.FirstOrDefault(t =>
				t.MachineNumber  == MachineNumber &&
				t.VersionGroupId == VersionGroupId);
		}

		public static Move Find(this ITable<Move> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveBattleStyle Find(this ITable<MoveBattleStyle> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveBattleStyleProse Find(this ITable<MoveBattleStyleProse> table, int MoveBattleStyleId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveBattleStyleId == MoveBattleStyleId &&
				t.LocalLanguageId   == LocalLanguageId);
		}

		public static MoveChangelog Find(this ITable<MoveChangelog> table, int MoveId, int ChangedInVersionGroupId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId                  == MoveId &&
				t.ChangedInVersionGroupId == ChangedInVersionGroupId);
		}

		public static MoveDamageClass Find(this ITable<MoveDamageClass> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveDamageClassProse Find(this ITable<MoveDamageClassProse> table, int MoveDamageClassId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveDamageClassId == MoveDamageClassId &&
				t.LocalLanguageId   == LocalLanguageId);
		}

		public static MoveEffect Find(this ITable<MoveEffect> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveEffectChangelog Find(this ITable<MoveEffectChangelog> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveEffectChangelogProse Find(this ITable<MoveEffectChangelogProse> table, int MoveEffectChangelogId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveEffectChangelogId == MoveEffectChangelogId &&
				t.LocalLanguageId       == LocalLanguageId);
		}

		public static MoveEffectProse Find(this ITable<MoveEffectProse> table, int MoveEffectId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveEffectId    == MoveEffectId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static MoveFlag Find(this ITable<MoveFlag> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveFlagMap Find(this ITable<MoveFlagMap> table, int MoveId, int MoveFlagId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId     == MoveId &&
				t.MoveFlagId == MoveFlagId);
		}

		public static MoveFlagProse Find(this ITable<MoveFlagProse> table, int MoveFlagId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveFlagId      == MoveFlagId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static MoveFlavorSummary Find(this ITable<MoveFlavorSummary> table, int MoveId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId          == MoveId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static MoveFlavorText Find(this ITable<MoveFlavorText> table, int MoveId, int VersionGroupId, int LanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId         == MoveId         &&
				t.VersionGroupId == VersionGroupId &&
				t.LanguageId     == LanguageId);
		}

		public static MoveMeta Find(this ITable<MoveMeta> table, int MoveId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId == MoveId);
		}

		public static MoveMetaAilment Find(this ITable<MoveMetaAilment> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveMetaAilmentName Find(this ITable<MoveMetaAilmentName> table, int MoveMetaAilmentId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveMetaAilmentId == MoveMetaAilmentId &&
				t.LocalLanguageId   == LocalLanguageId);
		}

		public static MoveMetaCategory Find(this ITable<MoveMetaCategory> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveMetaCategoryProse Find(this ITable<MoveMetaCategoryProse> table, int MoveMetaCategoryId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveMetaCategoryId == MoveMetaCategoryId &&
				t.LocalLanguageId    == LocalLanguageId);
		}

		public static MoveMetaStatChange Find(this ITable<MoveMetaStatChange> table, int MoveId, int StatId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId == MoveId &&
				t.StatId == StatId);
		}

		public static MoveName Find(this ITable<MoveName> table, int MoveId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveId          == MoveId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static MoveTarget Find(this ITable<MoveTarget> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static MoveTargetProse Find(this ITable<MoveTargetProse> table, int MoveTargetId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.MoveTargetId    == MoveTargetId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Nature Find(this ITable<Nature> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static NatureBattleStylePreference Find(this ITable<NatureBattleStylePreference> table, int NatureId, int MoveBattleStyleId)
		{
			return table.FirstOrDefault(t =>
				t.NatureId          == NatureId &&
				t.MoveBattleStyleId == MoveBattleStyleId);
		}

		public static NatureName Find(this ITable<NatureName> table, int NatureId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.NatureId        == NatureId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static NaturePokeathlonStat Find(this ITable<NaturePokeathlonStat> table, int NatureId, int PokeathlonStatId)
		{
			return table.FirstOrDefault(t =>
				t.NatureId         == NatureId &&
				t.PokeathlonStatId == PokeathlonStatId);
		}

		public static PalPark Find(this ITable<PalPark> table, int SpeciesId)
		{
			return table.FirstOrDefault(t =>
				t.SpeciesId == SpeciesId);
		}

		public static PalParkArea Find(this ITable<PalParkArea> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PalParkAreaName Find(this ITable<PalParkAreaName> table, int PalParkAreaId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PalParkAreaId   == PalParkAreaId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static PokeathlonStat Find(this ITable<PokeathlonStat> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokeathlonStatName Find(this ITable<PokeathlonStatName> table, int PokeathlonStatId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokeathlonStatId == PokeathlonStatId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static Pokedex Find(this ITable<Pokedex> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokedexProse Find(this ITable<PokedexProse> table, int PokedexId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokedexId       == PokedexId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static PokedexVersionGroup Find(this ITable<PokedexVersionGroup> table, int PokedexId, int VersionGroupId)
		{
			return table.FirstOrDefault(t =>
				t.PokedexId      == PokedexId &&
				t.VersionGroupId == VersionGroupId);
		}

		public static Pokemon Find(this ITable<Pokemon> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonAbility Find(this ITable<PokemonAbility> table, int PokemonId, int Slot)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId == PokemonId &&
				t.Slot      == Slot);
		}

		public static PokemonColor Find(this ITable<PokemonColor> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonColorName Find(this ITable<PokemonColorName> table, int PokemonColorId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonColorId  == PokemonColorId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static PokemonDexNumber Find(this ITable<PokemonDexNumber> table, int SpeciesId, int PokedexId)
		{
			return table.FirstOrDefault(t =>
				t.SpeciesId == SpeciesId &&
				t.PokedexId == PokedexId);
		}

		public static PokemonEggGroup Find(this ITable<PokemonEggGroup> table, int SpeciesId, int EggGroupId)
		{
			return table.FirstOrDefault(t =>
				t.SpeciesId  == SpeciesId &&
				t.EggGroupId == EggGroupId);
		}

		public static PokemonEvolution Find(this ITable<PokemonEvolution> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonForm Find(this ITable<PokemonForm> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonFormGeneration Find(this ITable<PokemonFormGeneration> table, int PokemonFormId, int GenerationId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonFormId == PokemonFormId &&
				t.GenerationId  == GenerationId);
		}

		public static PokemonFormName Find(this ITable<PokemonFormName> table, int PokemonFormId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonFormId   == PokemonFormId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static PokemonFormPokeathlonStat Find(this ITable<PokemonFormPokeathlonStat> table, int PokemonFormId, int PokeathlonStatId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonFormId    == PokemonFormId &&
				t.PokeathlonStatId == PokeathlonStatId);
		}

		public static PokemonGameIndex Find(this ITable<PokemonGameIndex> table, int PokemonId, int VersionId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId == PokemonId &&
				t.VersionId == VersionId);
		}

		public static PokemonHabitat Find(this ITable<PokemonHabitat> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonHabitatName Find(this ITable<PokemonHabitatName> table, int PokemonHabitatId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonHabitatId == PokemonHabitatId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static PokemonItem Find(this ITable<PokemonItem> table, int PokemonId, int VersionId, int ItemId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId == PokemonId &&
				t.VersionId == VersionId &&
				t.ItemId    == ItemId);
		}

		public static PokemonMove Find(this ITable<PokemonMove> table, int PokemonId, int VersionGroupId, int MoveId, int PokemonMoveMethodId, int Level)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId           == PokemonId           &&
				t.VersionGroupId      == VersionGroupId      &&
				t.MoveId              == MoveId              &&
				t.PokemonMoveMethodId == PokemonMoveMethodId &&
				t.Level               == Level);
		}

		public static PokemonMoveMethod Find(this ITable<PokemonMoveMethod> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonMoveMethodProse Find(this ITable<PokemonMoveMethodProse> table, int PokemonMoveMethodId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonMoveMethodId == PokemonMoveMethodId &&
				t.LocalLanguageId     == LocalLanguageId);
		}

		public static PokemonShape Find(this ITable<PokemonShape> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonShapeProse Find(this ITable<PokemonShapeProse> table, int PokemonShapeId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonShapeId  == PokemonShapeId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static PokemonSpecies Find(this ITable<PokemonSpecies> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PokemonSpeciesFlavorSummary Find(this ITable<PokemonSpeciesFlavorSummary> table, int PokemonSpeciesId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static PokemonSpeciesFlavorText Find(this ITable<PokemonSpeciesFlavorText> table, int SpeciesId, int VersionId, int LanguageId)
		{
			return table.FirstOrDefault(t =>
				t.SpeciesId  == SpeciesId &&
				t.VersionId  == VersionId &&
				t.LanguageId == LanguageId);
		}

		public static PokemonSpeciesName Find(this ITable<PokemonSpeciesName> table, int PokemonSpeciesId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static PokemonSpeciesProse Find(this ITable<PokemonSpeciesProse> table, int PokemonSpeciesId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonSpeciesId == PokemonSpeciesId &&
				t.LocalLanguageId  == LocalLanguageId);
		}

		public static PokemonStat Find(this ITable<PokemonStat> table, int PokemonId, int StatId)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId == PokemonId &&
				t.StatId    == StatId);
		}

		public static PokemonType Find(this ITable<PokemonType> table, int PokemonId, int Slot)
		{
			return table.FirstOrDefault(t =>
				t.PokemonId == PokemonId &&
				t.Slot      == Slot);
		}

		public static Region Find(this ITable<Region> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RegionName Find(this ITable<RegionName> table, int RegionId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.RegionId        == RegionId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Stat Find(this ITable<Stat> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static StatName Find(this ITable<StatName> table, int StatId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.StatId          == StatId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static SuperContestCombo Find(this ITable<SuperContestCombo> table, int FirstMoveId, int SecondMoveId)
		{
			return table.FirstOrDefault(t =>
				t.FirstMoveId  == FirstMoveId &&
				t.SecondMoveId == SecondMoveId);
		}

		public static SuperContestEffect Find(this ITable<SuperContestEffect> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SuperContestEffectProse Find(this ITable<SuperContestEffectProse> table, int SuperContestEffectId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.SuperContestEffectId == SuperContestEffectId &&
				t.LocalLanguageId      == LocalLanguageId);
		}

		public static Type Find(this ITable<Type> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TypeEfficacy Find(this ITable<TypeEfficacy> table, int DamageTypeId, int TargetTypeId)
		{
			return table.FirstOrDefault(t =>
				t.DamageTypeId == DamageTypeId &&
				t.TargetTypeId == TargetTypeId);
		}

		public static TypeGameIndex Find(this ITable<TypeGameIndex> table, int TypeId, int GenerationId)
		{
			return table.FirstOrDefault(t =>
				t.TypeId       == TypeId &&
				t.GenerationId == GenerationId);
		}

		public static TypeName Find(this ITable<TypeName> table, int TypeId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.TypeId          == TypeId &&
				t.LocalLanguageId == LocalLanguageId);
		}

		public static Version Find(this ITable<Version> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static VersionGroup Find(this ITable<VersionGroup> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static VersionGroupPokemonMoveMethod Find(this ITable<VersionGroupPokemonMoveMethod> table, int VersionGroupId, int PokemonMoveMethodId)
		{
			return table.FirstOrDefault(t =>
				t.VersionGroupId      == VersionGroupId &&
				t.PokemonMoveMethodId == PokemonMoveMethodId);
		}

		public static VersionGroupRegion Find(this ITable<VersionGroupRegion> table, int VersionGroupId, int RegionId)
		{
			return table.FirstOrDefault(t =>
				t.VersionGroupId == VersionGroupId &&
				t.RegionId       == RegionId);
		}

		public static VersionName Find(this ITable<VersionName> table, int VersionId, int LocalLanguageId)
		{
			return table.FirstOrDefault(t =>
				t.VersionId       == VersionId &&
				t.LocalLanguageId == LocalLanguageId);
		}
	}
}

#pragma warning restore 1591
